name: Query Review Bot

on:
  pull_request:
    types:
      - labeled  # Runs when the 'question' label is added
  workflow_dispatch:  # Allows manual execution from GitHub UI

permissions:
  pull-requests: write
  contents: read

jobs:
  review-query:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}  # Ensures workflow runs from the PR branch

      - name: Debug Git Info
        run: |
          echo "Base branch: ${{ github.base_ref }}"
          echo "Current branch: ${{ github.head_ref }}"
          BASE_BRANCH=${{ github.base_ref }}
          if [[ -z "$BASE_BRANCH" ]]; then
            BASE_BRANCH="main"  # Change this if your default branch is different
          fi
          git fetch --no-tags --depth=1 origin $BASE_BRANCH
          echo "Git diff output:"
          git diff --name-only origin/$BASE_BRANCH HEAD || echo "❌ No changes detected"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install duckdb

      - name: Get Modified queries.md Files
        id: get_files
        run: |
          BASE_BRANCH=${{ github.base_ref }}
          if [[ -z "$BASE_BRANCH" ]]; then
            BASE_BRANCH="main"
          fi
          git fetch --no-tags --depth=1 origin $BASE_BRANCH

          MODIFIED_FILES=$(git diff --name-only origin/$BASE_BRANCH HEAD | grep 'queries.md' || echo "")

          echo "Modified files detected: $MODIFIED_FILES"

          if [[ -z "$MODIFIED_FILES" ]]; then
            echo "❌ No queries.md files found."
            exit 0
          fi

          echo "files=$MODIFIED_FILES" >> $GITHUB_ENV

      - name: Evaluate Queries
        id: evaluate_queries
        run: |
          if [[ -z "${{ env.files }}" ]]; then
            echo "❌ No queries.md files found."
            exit 0
          fi
      
          OUTPUT=""
          for FILE in ${{ env.files }}; do
            echo "🔍 Processing file: $FILE"
      
            # Run the evaluation script and handle errors
            RESULT=$(python scripts/evaluate_sql.py "$FILE" || echo "⚠️ Error processing file: $FILE")
      
            # Ensure result is not empty
            if [[ -z "$RESULT" ]]; then
              RESULT="⚠️ No output generated for $FILE"
            fi
      
            OUTPUT+="\n\n#### Review for $FILE\n$RESULT"
          done
      
          # Escape output to avoid formatting errors in GitHub Actions
          echo -e "$OUTPUT" > review_output.txt
          echo "review_output=$(jq -sRr @json < review_output.txt)" >> $GITHUB_ENV
        

      - name: Comment on PR
        run: |
          if [[ -z "${{ env.review_output }}" ]]; then
            echo "ℹ️ No AI suggestions to post."
            exit 0
          fi

          COMMENT="### 🤖 SQL Query Review\n${{ env.review_output }}"
          echo "$COMMENT" > pr_comment.txt

          gh pr comment ${{ github.event.pull_request.html_url }} --body-file pr_comment.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
