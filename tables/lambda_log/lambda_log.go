package lambda_log

import (
	"time"

	"github.com/turbot/tailpipe-plugin-sdk/schema"
)

type LambdaLog struct {
	schema.CommonFields

	Timestamp      *time.Time             `json:"timestamp,omitempty" parquet:"name=timestamp"`
	RequestID      *string                `json:"request_id,omitempty" parquet:"name=request_id"`
	LogType        *string                `json:"log_type,omitempty" parquet:"name=log_type"`
	LogLevel       *string                `json:"log_level,omitempty" parquet:"name=log_level"`
	Message        *string                `json:"message,omitempty" parquet:"name=message"`
	MessageJson    map[string]interface{} `json:"message_json,omitempty" parquet:"name=message_json, type=JSON"`
	RawMessage     *string                `json:"raw_message,omitempty" parquet:"name=raw_message"`
	RawMessageJson map[string]interface{} `json:"raw_message_json,omitempty" parquet:"name=raw_message_json, type=JSON"`
	LogGroupName   *string                `json:"log_group_name,omitempty" parquet:"name=log_group_name"`

	// Report Specific Fields
	Duration       *float64 `json:"duration,omitempty" parquet:"name=duration"`
	BilledDuration *float64 `json:"billed_duration,omitempty" parquet:"name=billed_duration"`
	MemorySize     *int     `json:"memory_size,omitempty" parquet:"name=memory_size"`
	MaxMemoryUsed  *int     `json:"max_memory_used,omitempty" parquet:"name=max_memory_used"`
}

func (c *LambdaLogTable) GetColumnDescriptions() map[string]string {
	return map[string]string{
		// Lambda-specific log fields
		"billed_duration":  "The billed execution time in milliseconds, always rounded up to the nearest millisecond for billing purposes.",
		"duration":         "The actual execution time of the Lambda function in milliseconds, as reported in REPORT log entries.",
		"log_group_name":   "The CloudWatch log group name where the log entry was recorded, typically matches the Lambda function name.",
		"log_level":        "The application log level for user-generated logs (INFO, ERROR, WARN, DEBUG).",
		"log_type":         "The type of log entry, indicating system events like START, END, REPORT, or INIT_START.",
		"max_memory_used":  "The maximum amount of memory actually used during the function execution in megabytes.",
		"memory_size":      "The amount of memory allocated to the Lambda function in megabytes, as configured in the function settings.",
		"message_json":     "Extracted message parsed as JSON, populated only if the message content is valid JSON.",
		"message":          "Extracted and parsed message content when possible, populated for both plain text and JSON-formatted logs.",
		"raw_message_json": "Full original message parsed as JSON, populated only if the original message is native JSON or convertible to JSON.",
		"raw_message":      "Complete original message string as received from the log source, always populated regardless of format.",
		"request_id":       "The unique identifier for the Lambda function invocation request.",
		"timestamp":        "The timestamp when the log entry was generated by the Lambda function or runtime.",

		// Tailpipe-specific metadata fields
		"tp_akas": "A list of associated Amazon Resource Names (ARNs) found in the log messages.",
	}
}
